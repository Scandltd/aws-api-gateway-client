import React from 'react';
import BaseFormContainer from '../BaseFormContainer';
import SelectField from '../fields/SelectField';
import PropTypes from 'prop-types';
import HttpMethodEnum from '../../../enum/httpMethodTypeEnum';
import AuthorizationTypeEnum from '../../../enum/authorizationTypeEnum';
import { createMethodApiRequest } from "../../../store/actions/entriesActions";
import { connect } from "react-redux";
import TextField from '@material-ui/core/TextField';

/**
 *
 */
class RestApiMethodForm extends BaseFormContainer {
    /**
     *
     * @param props
     */
    constructor(props) {
        super(props);
        this.state.data = this.initData({
            httpMethod: '',
            authorizationType: 'NONE',
            authorizerId: ''
        });

        this.setValidationRules({
            httpMethod: {
                presence: {
                    allowEmpty: false
                },
                inclusion: Object.values(HttpMethodEnum)
            },
            authorizationType: {
                presence: {
                    allowEmpty: false
                },
                inclusion: Object.values(AuthorizationTypeEnum)
            },
            authorizerId: {
                length: {
                    maximum: 250
                }
            }
        });
    }

    /**
     *
     */
    onRequestSuccess = (response) => {
        this.setState({isProcessing: false});
        this.props.onSuccess();
    };

    /**
     *
     * @param err
     */
    onRequestError = (err) => {
        this.setState({isProcessing: false});
    };

    /**
     *
     */
    onSubmitValid = () => {
        this.setState({isProcessing: true});
        this.props.actions.createHttpMethod(this.props.accountId, this.props.restApiId, this.props.resourceId, this.state.data, this.onRequestSuccess, this.onRequestError);
    };

    /**
     *
     * @returns {*}
     */
    render() {
        return this.renderForm(
            <React.Fragment>
                <SelectField
                    options={HttpMethodEnum}
                    name="httpMethod"
                    label="Http method"
                    value={this.state.data.httpMethod}
                    error={Boolean(this.state.errors.httpMethod) ? this.state.errors.httpMethod[0] : ''}
                    onChange={this.handleChange}
                    helperText="Specifies the method request's HTTP method type."
                />

                <SelectField
                    options={AuthorizationTypeEnum}
                    name="authorizationType"
                    label="Authorization Type"
                    value={this.state.data.authorizationType}
                    error={Boolean(this.state.errors.authorizationType) ? this.state.errors.authorizationType[0] : ''}
                    onChange={this.handleChange}
                    helperText="The method's authorization type"
                />

                <TextField
                    label="authorizerId"
                    name="authorizerId"
                    placeholder="Authorizer Id"
                    helperText={Boolean(this.state.errors.path) ? this.state.errors.path[0] : 'Specifies the identifier of an Authorizer to use on this Method, if the type is CUSTOM or COGNITO_USER_POOLS. The authorizer identifier is generated by API Gateway when you created the authorizer'}
                    fullWidth
                    margin="normal"
                    error={Boolean(this.state.errors.authorizerId)}
                    multiline={false}
                    InputLabelProps={{
                        shrink: true,
                    }}
                    onChange={this.handleChange}
                    value={this.state.data.authorizerId}
                />

            </React.Fragment>
        );
    }
}

/**
 *
 * @param {*} dispatch
 */
const mapDispatchToProps = (dispatch) => {
    return {
        actions: {
            createHttpMethod: (accountId, restApiId, resourceId, data, onSuccess = null, onError = null) => dispatch(createMethodApiRequest(accountId, restApiId, resourceId, data, onSuccess, onError)),
        }
    }
};

export default connect(null, mapDispatchToProps)(RestApiMethodForm);

RestApiMethodForm.propTypes = {
    accountId: PropTypes.any.isRequired,
    restApiId: PropTypes.any.isRequired,
    resourceId: PropTypes.any.isRequired,
    initialData: PropTypes.object,
    isUpdateAction: PropTypes.bool.isRequired,
    entityId: PropTypes.any,
    onSuccess: PropTypes.func.isRequired
};
